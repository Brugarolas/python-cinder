from types import CodeType, ModuleType
from typing import Any, Callable, List, Optional, Tuple, Type, TypeVar

STRUCTURED_DATA_VERSION: int
_built_with_asan: bool

class _PatchEnabledDescr:
    def __get__(self, inst: StrictModule, typ: Type[StrictModule]) -> bool: ...

class StrictModule(ModuleType):
    __name__: Any
    __patch_enabled__: _PatchEnabledDescr
    def __init__(self, d: Mapping[str, object], enable_patching: bool) -> None: ...
    def patch(self, name: str, value: object) -> None: ...
    def patch_delete(self, name: str) -> None: ...
    def __delattr__(self, name) -> Any: ...
    def __dir__(self) -> list: ...
    def __setattr__(self, name, value) -> Any: ...

class async_cached_classproperty:
    func: Any
    name: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __get__(self, instance, owner) -> Any: ...

class async_cached_property:
    fget: Any
    func: Any
    name: Any
    slot: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __get__(self, instance, owner) -> Any: ...

class cached_classproperty:
    func: Any
    name: Any
    __name__: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __get__(self, instance, owner) -> Any: ...

class cached_property:
    fget: Any
    func: Any
    name: Any
    slot: Any
    __name__: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def has_value(self, *args, **kwargs) -> Any: ...
    def __get__(self, instance, owner) -> Any: ...
    def __set_name__(self, *args, **kwargs) -> Any: ...

TType = TypeVar(TType, bound=Type[object])

def _get_arg0_from_pyframe(*args, **kwargs) -> Any: ...
def _get_call_stack(*args, **kwargs) -> Any: ...
def _get_coro_awaiter(*args, **kwargs) -> Any: ...
def _get_entire_call_stack_as_qualnames(*args, **kwargs) -> Any: ...
def _get_entire_call_stack_as_qualnames_with_lineno(*args, **kwargs) -> Any: ...
def _get_frame_gen(*args, **kwargs) -> Any: ...
def _get_qualname(*args, **kwargs) -> Any: ...
def _has_no_shadowing_instances(*args, **kwargs) -> Any: ...
def _set_qualname(_code: CodeType, _name: str, /) -> None: ...
def cinder_set_warn_handler(*args, **kwargs) -> Any: ...
def clear_caches(*args, **kwargs) -> Any: ...
def clear_classloader_caches(*args, **kwargs) -> Any: ...
def clear_all_shadow_caches(*args, **kwargs) -> Any: ...
def clear_type_profiles(*args, **kwargs) -> Any: ...
def debug_break(*args, **kwargs) -> Any: ...
def freeze_type(_type: TType, /) -> TType: ...
def get_and_clear_type_profiles(*args, **kwargs) -> Any: ...
def get_and_clear_type_profiles_with_metadata(*args, **kwargs) -> Any: ...
def get_warn_handler() -> Any: ...
def getknobs(*args, **kwargs) -> Any: ...
def set_profile_interp(*args, **kwargs) -> Any: ...
def set_profile_interp_all(*args, **kwargs) -> Any: ...
def set_profile_interp_period(*args, **kwargs) -> Any: ...
def set_warn_handler(cb) -> Any: ...
def setknobs(knobs) -> Any: ...
def strict_module_patch(mod, name, value) -> Any: ...
def strict_module_patch_delete(mod, name) -> Any: ...
def strict_module_patch_enabled(mod) -> Any: ...
def warn_on_inst_dict(_type: TType, /) -> TType: ...
def watch_sys_modules(): ...
